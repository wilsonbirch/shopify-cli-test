{"version":3,"file":"template.js","sourceRoot":"","sources":["../../../../../src/cli/services/dev/graphiql/template.ts"],"names":[],"mappings":"AAAA,OAAO,EAAC,eAAe,EAAC,MAAM,0BAA0B,CAAA;AAExD,MAAM,UAAU,GAAG,eAAe,EAAE,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,MAAM,CAAA;AAEvF,MAAM,oBAAoB,GAAG;;;;;;;;;;;;;;;;6BAgBA,UAAU;;6BAEV,UAAU;;uBAEhB,UAAU;;uBAEV,UAAU;;CAEhC,CAAA;AAED,MAAM,CAAC,MAAM,YAAY,GAAG;;;;;;;;;;;;CAY3B,CAAC,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC,CAAA;AAEvB,MAAM,CAAC,MAAM,QAAQ,GAAG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;yBA0HC,oBAAoB;KAC5B,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC;KACpB,OAAO,CAAC,KAAK,EAAE,KAAK,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAuCrC,CAAA","sourcesContent":["import {platformAndArch} from '@shopify/cli-kit/node/os'\n\nconst controlKey = platformAndArch().platform === 'darwin' ? 'MAC_COMMAND_KEY' : 'Ctrl'\n\nconst graphiqlIntroMessage = `\n# Welcome to the Shopify GraphiQL Explorer! If you've used GraphiQL before,\n# you can go ahead and jump to the next tab.\n#\n# GraphiQL is an in-browser tool for writing, validating, and\n# testing GraphQL queries.\n#\n# Type queries into this side of the screen, and you will see intelligent\n# typeaheads aware of the current GraphQL type schema and live syntax and\n# validation errors highlighted within the text.\n#\n# GraphQL queries typically start with a \"{\" character. Lines that start\n# with a # are ignored.\n#\n# Keyboard shortcuts:\n#\n#   Prettify query:  Shift-${controlKey}-P (or press the prettify button)\n#\n#  Merge fragments:  Shift-${controlKey}-M (or press the merge button)\n#\n#        Run Query:  ${controlKey}-Enter (or press the play button)\n#\n#    Auto Complete:  ${controlKey}-Space (or just start typing)\n#\n`\n\nexport const defaultQuery = `query shopInfo {\n  shop {\n    name\n    url\n    myshopifyDomain\n    plan {\n      displayName\n      partnerDevelopment\n      shopifyPlus\n    }\n  }\n}\n`.replace(/\\n/g, '\\\\n')\n\nexport const template = `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>GraphiQL</title>\n    <style>\n      body {\n        height: 100%;\n        margin: 0;\n        width: 100%;\n        overflow: hidden;\n      }\n      .top-bar {\n        padding: 0 4px;\n        border-bottom: 1px solid #d6d6d6;\n        font-family: sans-serif;\n        font-size: 0.85em;\n        color: #666;\n      }\n      .top-bar a {\n        text-decoration: none;\n      }\n      #top-error-bar {\n        display: none;\n        background-color: #ff0000;\n        color: #ffffff;\n      }\n      .top-bar p {\n        margin: 0;\n      }\n      .top-bar .container {\n        margin: 0;\n        display: flex;\n        flex-direction: row;\n        align-content: start;\n        align-items: stretch;\n      }\n      .top-bar .container:not(.bounded) {\n        width: 100%;\n      }\n      .top-bar .container.bounded {\n        max-width: 1200px;\n        flex-wrap: wrap;\n      }\n      .top-bar .box {\n        padding: 8px;\n        text-align: left;\n        align-self: center;\n      }\n      .top-bar .box.align-right {\n        text-align: right;\n        flex-grow: 1;\n      }\n      #graphiql {\n        height: 100vh;\n        display: flex;\n        flex-direction: column;\n      }\n      #graphiql-explorer {\n        flex-grow: 1;\n        overflow: auto;\n      }\n    </style>\n    <script\n      src=\"https://unpkg.com/react@17/umd/react.development.js\"\n      integrity=\"sha512-Vf2xGDzpqUOEIKO+X2rgTLWPY+65++WPwCHkX2nFMu9IcstumPsf/uKKRd5prX3wOu8Q0GBylRpsDB26R6ExOg==\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <script\n      src=\"https://unpkg.com/react-dom@17/umd/react-dom.development.js\"\n      integrity=\"sha512-Wr9OKCTtq1anK0hq5bY3X/AvDI5EflDSAh0mE9gma+4hl+kXdTJPKZ3TwLMBcrgUeoY0s3dq9JjhCQc7vddtFg==\"\n      crossorigin=\"anonymous\"\n    ></script>\n    <link rel=\"stylesheet\" href=\"https://unpkg.com/graphiql/graphiql.min.css\" />\n  </head>\n  <body>\n    <div id=\"graphiql\">\n      <div id=\"top-error-bar\" class=\"top-bar\">\n        <div class=\"box\">‚ö†Ô∏è The server has been stopped. Restart <code>dev</code> and launch the GraphiQL Explorer from the terminal again.</div>\n      </div>\n      <div class=\"top-bar\">\n        <div class=\"container\">\n          <div class=\"container bounded\">\n            <div class=\"box\">\n              Status: <span id=\"status\">üü¢ Running</span>\n            </div>\n            <div class=\"box\">\n              API version:\n              <select id=\"version-select\">\n                {% for version in versions %}\n                  <option value=\"{{ version }}\" {% if version == apiVersion %}selected{% endif %}>{{ version }}</option>\n                {% endfor %}\n              </select>\n            </div>\n            <div class=\"box\">\n              Store: <a href=\"https://{{ storeFqdn }}/admin\" target=\"_blank\">{{ storeFqdn }}</a>\n            </div>\n            <div class=\"box\">\n              App: <a href=\"{{ appUrl }}\" target=\"_blank\">{{ appName }}</a>\n            </div>\n          </div>\n          <div class=\"box align-right\">\n            The GraphiQL Explorer uses the access scopes declared in your app's configuration file.\n          </div>\n        </div>\n      </div>\n      <div id=\"graphiql-explorer\">Loading...</div>\n    </div>\n    <script\n      src=\"https://unpkg.com/graphiql@3.0.4/graphiql.min.js\"\n      type=\"application/javascript\"\n    ></script>\n    <script>\n      const macCommandKey = String.fromCodePoint(8984)\n      const renderGraphiQL = function(apiVersion) {\n        ReactDOM.render(\n          React.createElement(GraphiQL, {\n            fetcher: GraphiQL.createFetcher({\n              url: '{{url}}/graphiql/graphql.json?api_version=' + apiVersion,\n            }),\n            defaultEditorToolsVisibility: true,\n            defaultTabs: [\n              {query: \"${graphiqlIntroMessage\n                .replace(/\"/g, '\\\\\"')\n                .replace(/\\n/g, '\\\\n')}\".replace(/MAC_COMMAND_KEY/g, macCommandKey)},\n              {%for query in defaultQueries%}\n                {query: \"{%if query.preface %}{{query.preface}}\\\\n{% endif %}{{query.query}}\", variables: \"{{query.variables}}\"},\n              {%endfor%}\n            ],\n          }),\n          document.getElementById('graphiql-explorer'),\n        )\n      }\n      renderGraphiQL('{{apiVersion}}')\n\n      // Update the version when the select changes\n      document.getElementById('version-select').addEventListener('change', function(event) {\n        renderGraphiQL(event.target.value)\n      })\n\n      // Warn when the server has been stopped\n      const pingInterval = setInterval(function() {\n        const topErrorBar = document.querySelector('#graphiql #top-error-bar')\n        const statusDiv = document.querySelector('#graphiql #status')\n        const displayErrorServerStopped = function() {\n          topErrorBar.style.display = 'block'\n          statusDiv.innerHTML = '‚ùå Disconnected'\n        }\n        const displayErrorServerStoppedTimeout = setTimeout(displayErrorServerStopped, 3000)\n        fetch('{{url}}/graphiql/ping')\n          .then(function(response) {\n            if (response.status === 200) {\n              clearTimeout(displayErrorServerStoppedTimeout)\n              topErrorBar.style.display = 'none'\n              statusDiv.innerHTML = 'üü¢ Running'\n            } else {\n              displayErrorServerStopped()\n            }\n          })\n      }, 2000)\n    </script>\n  </body>\n</html>\n`\n"]}